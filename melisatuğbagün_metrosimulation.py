# -*- coding: utf-8 -*-
"""MelisaTuğbaGün_MetroSimulation.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1QUBQcsYWlmOljcmueQoudRForgdBVDcX
"""

from collections import defaultdict, deque
import heapq
from typing import Dict, List, Set, Tuple, Optional

class Istasyon:
    def __init__(self, idx: str, ad: str, hat: str):
        self.idx = idx
        self.ad = ad
        self.hat = hat
        self.komsular: List[Tuple['Istasyon', int]] = []  # (istasyon, süre) tuple'ları

    def komsu_ekle(self, istasyon: 'Istasyon', sure: int):
        self.komsular.append((istasyon, sure))

class MetroAgi:
    def __init__(self):
        self.istasyonlar: Dict[str, Istasyon] = {}
        self.hatlar: Dict[str, List[Istasyon]] = defaultdict(list)

    def istasyon_ekle(self, idx: str, ad: str, hat: str) -> None:
        if idx not in self.istasyonlar:
            istasyon = Istasyon(idx, ad, hat)
            self.istasyonlar[idx] = istasyon
            self.hatlar[hat].append(istasyon)

    def baglanti_ekle(self, istasyon1_id: str, istasyon2_id: str, sure: int) -> None:
        istasyon1 = self.istasyonlar[istasyon1_id]
        istasyon2 = self.istasyonlar[istasyon2_id]
        istasyon1.komsu_ekle(istasyon2, sure)
        istasyon2.komsu_ekle(istasyon1, sure)

    def en_az_aktarma_bul(self, baslangic_id: str, hedef_id: str) -> Optional[List[Istasyon]]:
        """BFS ile en az aktarmalı rotayı buluyoruz"""

        # İstasyon var mı kontrol ediyoruz.
        if baslangic_id not in self.istasyonlar:
            print("Hata: Başlangıç istasyonu yok!")
            return None
        if hedef_id not in self.istasyonlar:
            print("Hata: Hedef istasyonu yok!")
            return None

        baslangic = self.istasyonlar[baslangic_id]
        hedef = self.istasyonlar[hedef_id]

        # Zaten aynı yerdeysek
        if baslangic == hedef:
            return [baslangic]

        # BFS için kuyruk hazırlıyoruz
        kuyruk = deque([(baslangic, [baslangic])])
        gidilenler = set()
        gidilenler.add(baslangic)

        while kuyruk:
            suanki, yol = kuyruk.popleft()

            # Hedefe vardık mı?
            if suanki == hedef:
                return yol

            # Bütün komşulara bakalım
            for komsu, sure in suanki.komsular:
                if komsu not in gidilenler:
                    gidilenler.add(komsu)
                    kuyruk.append((komsu, yol + [komsu]))

        # Rota yoksa
        print("Bu iki durak arasında yol bulamadım :(")
        return None

    def en_hizli_rota_bul(self, baslangic_id: str, hedef_id: str) -> Optional[Tuple[List[Istasyon], int]]:
        """A* algoritmasıyla en kısa süreli rotayı buluyoruz"""

        # Kontroller
        if baslangic_id not in self.istasyonlar:
            print("Başlangıç yok ki!")
            return None
        if hedef_id not in self.istasyonlar:
            print("Hedef yok ki!")
            return None

        baslangic = self.istasyonlar[baslangic_id]
        hedef = self.istasyonlar[hedef_id]

        # Aynı yerdeysek
        if baslangic == hedef:
            return ([baslangic], 0)

        # Öncelik kuyruğu hazırlıyoruz
        kuyruk = []
        heapq.heappush(kuyruk, (0, 0, baslangic, [baslangic], 0))  # (tahmini, sayaç, istasyon, yol, sure)

        # En iyi süreleri tutacağız
        en_iyiler = {baslangic: 0}
        sayac = 1  # heapq için

        while kuyruk:
            tahmini, _, suanki, yol, suanki_sure = heapq.heappop(kuyruk)

            # Hedefe vardık mı?
            if suanki == hedef:
                print(f"Bulduk! Toplam {suanki_sure} dakika")
                return (yol, suanki_sure)

            # Daha iyi yol biliyorsak atla
            if suanki in en_iyiler and en_iyiler[suanki] < suanki_sure:
                continue

            # Komşuları ekleyelim
            for komsu, sure in suanki.komsular:
                yeni_sure = suanki_sure + sure

                # Basit bir tahmin (aslında mesafe kullanılabilir)
                tahmin = 0

                # Daha iyi yol bulduysak
                if komsu not in en_iyiler or yeni_sure < en_iyiler.get(komsu, float('inf')):
                    en_iyiler[komsu] = yeni_sure
                    heapq.heappush(kuyruk, (yeni_sure + tahmin, sayac, komsu, yol + [komsu], yeni_sure))
                    sayac += 1

        # Rota yok
        print("Üzgünüm, rota yok...")
        return None

# Örnek Kullanım
if __name__ == "__main__":
    metro = MetroAgi()

    # İstasyonlar ekleme
    # Kırmızı Hat
    metro.istasyon_ekle("K1", "Kızılay", "Kırmızı Hat")
    metro.istasyon_ekle("K2", "Ulus", "Kırmızı Hat")
    metro.istasyon_ekle("K3", "Demetevler", "Kırmızı Hat")
    metro.istasyon_ekle("K4", "OSB", "Kırmızı Hat")

    # Mavi Hat
    metro.istasyon_ekle("M1", "AŞTİ", "Mavi Hat")
    metro.istasyon_ekle("M2", "Kızılay", "Mavi Hat")  # Aktarma noktası
    metro.istasyon_ekle("M3", "Sıhhiye", "Mavi Hat")
    metro.istasyon_ekle("M4", "Gar", "Mavi Hat")

    # Turuncu Hat
    metro.istasyon_ekle("T1", "Batıkent", "Turuncu Hat")
    metro.istasyon_ekle("T2", "Demetevler", "Turuncu Hat")  # Aktarma noktası
    metro.istasyon_ekle("T3", "Gar", "Turuncu Hat")  # Aktarma noktası
    metro.istasyon_ekle("T4", "Keçiören", "Turuncu Hat")

    # Bağlantılar ekleme
    # Kırmızı Hat bağlantıları
    metro.baglanti_ekle("K1", "K2", 4)  # Kızılay -> Ulus
    metro.baglanti_ekle("K2", "K3", 6)  # Ulus -> Demetevler
    metro.baglanti_ekle("K3", "K4", 8)  # Demetevler -> OSB

    # Mavi Hat bağlantıları
    metro.baglanti_ekle("M1", "M2", 5)  # AŞTİ -> Kızılay
    metro.baglanti_ekle("M2", "M3", 3)  # Kızılay -> Sıhhiye
    metro.baglanti_ekle("M3", "M4", 4)  # Sıhhiye -> Gar

    # Turuncu Hat bağlantıları
    metro.baglanti_ekle("T1", "T2", 7)  # Batıkent -> Demetevler
    metro.baglanti_ekle("T2", "T3", 9)  # Demetevler -> Gar
    metro.baglanti_ekle("T3", "T4", 5)  # Gar -> Keçiören

    # Hat aktarma bağlantıları (aynı istasyon farklı hatlar)
    metro.baglanti_ekle("K1", "M2", 2)  # Kızılay aktarma
    metro.baglanti_ekle("K3", "T2", 3)  # Demetevler aktarma
    metro.baglanti_ekle("M4", "T3", 2)  # Gar aktarma

    # Test senaryoları
    print("\n=== Test Senaryoları ===")

    # Senaryo 1: AŞTİ'den OSB'ye
    print("\n1. AŞTİ'den OSB'ye:")
    rota = metro.en_az_aktarma_bul("M1", "K4")
    if rota:
        print("En az aktarmalı rota:", " -> ".join(i.ad for i in rota))

    sonuc = metro.en_hizli_rota_bul("M1", "K4")
    if sonuc:
        rota, sure = sonuc
        print(f"En hızlı rota ({sure} dakika):", " -> ".join(i.ad for i in rota))

    # Senaryo 2: Batıkent'ten Keçiören'e
    print("\n2. Batıkent'ten Keçiören'e:")
    rota = metro.en_az_aktarma_bul("T1", "T4")
    if rota:
        print("En az aktarmalı rota:", " -> ".join(i.ad for i in rota))

    sonuc = metro.en_hizli_rota_bul("T1", "T4")
    if sonuc:
        rota, sure = sonuc
        print(f"En hızlı rota ({sure} dakika):", " -> ".join(i.ad for i in rota))

    # Senaryo 3: Keçiören'den AŞTİ'ye
    print("\n3. Keçiören'den AŞTİ'ye:")
    rota = metro.en_az_aktarma_bul("T4", "M1")
    if rota:
        print("En az aktarmalı rota:", " -> ".join(i.ad for i in rota))

    sonuc = metro.en_hizli_rota_bul("T4", "M1")
    if sonuc:
        rota, sure = sonuc
        print(f"En hızlı rota ({sure} dakika):", " -> ".join(i.ad for i in rota))